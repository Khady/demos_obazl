load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_library",
    "ocaml_module",
    "ocaml_ns_resolver",
    "ocaml_test",
)

## :colors_ns is "thunkish", it just wraps some other ns resolver modules
ocaml_ns_resolver(
    name = "colors_ns",
    ns   = "Colors",
    imports = {
        ## ns_resolver modules:
        "//ns/bottomup/compose/rgb:rgb_ns"   : "RGB",
        "//ns/bottomup/compose/hsb:hsb_ns"   : "HSB",
        "//ns/bottomup/compose/cmyk:cmyk_ns" : "CMYK",
    },
)

# to make the resolver useful we need to aggregate its components,
# which are themselves aggregated as libraries.
# they depend on their resolvers, which need not be listed explicitly.
ocaml_library(
    name = "libColors",
    manifest = [
        "//ns/bottomup/compose/rgb:libRGB",
        "//ns/bottomup/compose/hsb:libHSB",
        "//ns/bottomup/compose/cmyk:libCMYK",
    ],
    visibility = ["//visibility:public"],
)

#############
ocaml_module(
    name   = "Test",
    struct = "test.ml",
    deps = [
        ":libColors",
        ":colors_ns",
        "@ounit2//:ounit2"
    ],
)

ocaml_test(
    name = "test",
    main = ":Test",
)
