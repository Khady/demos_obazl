load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    "ocaml_library",
    "ocaml_ns_resolver",
    "ocaml_test",
)

ocaml_test(
    name = "test",
    main = "Test"
)

ocaml_module(
    name   = "Test",
    struct = "test.ml",
    deps = [
        ":Greek",
        "@ounit2//:ounit2",
    ],
)

###################
# package resolver and submodules in one library
ocaml_library(
    name = "Greek",
    manifest = [
        # ":greek_ns",
        ":Alpha",
        ":Beta",
        ":Gamma",
        "//ns/bottomup/mwe/includes/colors:libColor"
    ],
)

ocaml_ns_resolver(
    name = "greek_ns",
    ns   = "Greek",
    submodules = [
        "Alpha",
        "Beta",
        "Gamma",
        ],
    include = {
        # incorporate submodules from a different (bottomup) ns
        # e.g. colors:Red will be accessible as Greek.Red
        "//ns/bottomup/mwe/includes/colors:Red"  : "Red",
        "//ns/bottomup/mwe/includes/colors:Green": "Green",
        "//ns/bottomup/mwe/includes/colors:Blue" : "Blue",
    },
)

ocaml_module(
    name        = "Alpha",
    ns_resolver = ":greek_ns",
    struct      = "alpha.ml",
)

ocaml_module(
    name        = "Beta",
    ns_resolver = ":greek_ns",
    struct      = "beta.ml",
)

ocaml_module(
    name        = "Gamma",
    ns_resolver = ":greek_ns",
    struct      = "gamma.ml",
)
