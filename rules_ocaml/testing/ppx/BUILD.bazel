# run all tests: $ bazel test rules/ocaml_test:test
# run one test : $ bazel test rules/ocaml_test:hello_alcotest

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_executable",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable",
)

test_suite(
    name = "test",
    tests = [
        # "hello_alcotest",
        "hello_ounit2",
        "hello_ppx_test",
    ],
)

# ocaml_test(
#     name = "hello_alcotest",
#     main = "test_alcotest.ml",
#     deps = [
#         "//rules/ocaml_module:Hello",
#         "@alcotest//:alcotest",
#     ],
# )

ocaml_test(
    name = "hello_ounit2",
    main = ":Test_ounit2",
    deps = [
        # "@ounit2//:ounit2",
        ## Notice we're using a module from a different package:
        "//rules/ocaml_module:Hello",
        # ":_Hello"
    ],
)

ocaml_module(
    name   = "Test_ounit2",
    struct = "test_ounit2.ml",
    deps   = [
        "@ounit2//:ounit2",
        ## Notice we're using a module from a different package:
        "//rules/ocaml_module:Hello",
        # ":_Hello"
    ],
)

## For ppx_inline_test we need to use the ppx_executable the transform
## the source file, and we need to run
## `Ppx_inline_test_lib.Runtime.exit ()` last.
ocaml_test(
    name = "hello_ppx_test",
    args = [
        "inline-test-runner",
        "hello",
    ],
    main = ":Runner",  ## contains Ppx_inline_test_lib.Runtime.exit (); obazl puts 'main' last
    deps = [
        ":Test_ppx_inline",  # the transformed and compiled test code
        "@ppx_inline_test//runner/lib",
        # "//rules/ocaml_module:Hello",
        ":Hello"
    ],
)

ocaml_module(
    name   = "Runner",
    struct = "runner.ml",
    deps   = [
        "@ppx_inline_test//runtime-lib",
    ],
)

ocaml_module(
    name = "Test_ppx_inline",
    ppx = ":ppx_inline_test",
    ppx_args = [
        "-inline-test-lib",
        "hello",
    ],
    # ppx_print = "@rules_ocaml//ppx/print",
    struct = "test_ppx_inline.ml",
    opts = ["-w", "-33"], # unused open Stdlib.String.
    deps = [
        ":Hello",
    ],
)

ocaml_module(
    name = "Hello",
    ppx = ":ppx_inline_test",
    ppx_args = [
        "-inline-test-lib",
        "hello",
    ],
    struct = "hello.ml",
    deps = [
        # "@core//:core",
        # "@ppx_inline_test//runtime-lib", ## not needed -
        # listed as ppx_codep on the ppx executable
        # "//rules/ocaml_module:Hello"
    ],
)

################################################################
ppx_executable(
    name = "ppx_inline_test",
    main = ":Driver",
    opts = [],
    deps = [
        "@ppx_inline_test//:ppx_inline_test",
        # "@ppxlib//:ppxlib",
    ],
    ppx_codeps = [
        "@ppx_inline_test//runtime-lib",
    ]
)

###########
ocaml_module(
    name = "Driver",
    struct = ":ppxlib_driver.ml",
    visibility = ["//visibility:public"],
    deps = ["@ppxlib//:ppxlib"],
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
