## This example demonstrates how to use `genrule` to run a PPX
## transformation. Normally you would not need to do this.

# $ bazel test ppx/genrule:test

## demonstrates how to run a ppx manually using a `genrule`

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_executable")

load("@bazel_skylib//rules:common_settings.bzl", "string_flag")

string_flag(
    name = "msg",
    build_setting_default = "hello",
    values = [
        "hello",
        "goodbye",
    ],
)

config_setting(
    name = "hello",
    flag_values = {":msg": "hello"},
)

config_setting(
    name = "goodbye",
    flag_values = {":msg": "goodbye"},
)

###########
ocaml_test(
    name = "test",
    main = "Test",
    timeout = "short"
)

ocaml_module(
    name = "Test",
    struct = "test.ml",
    deps = [
        ":Hello",
        "@ounit2//:ounit2"
    ]
)

#############
ocaml_module(
    name = "Hello",

    ## use output of genrule that runs the ppx
    struct = "tmp/hello.ml",  # output of genrule, which will be triggered
    deps = [
        "@core//:core"
    ],

    ## normally you would use these convenience attribs to tell the
    ## `ocaml_module` rule run the ppx as an action before compiling:
    # src  = "hello.ml",
    # ppx  = ":ppx.exe",
)

## switch to get text output
# PPX_PRINT=""  # text output
PPX_PRINT = "-dump-ast"  # binary output

########
genrule(
    name = "transform",
    srcs = ["hello.ml"],
    ## due to filename->module_name rules, output must be hello.ml, not e.g. hello.pp.ml
    outs = ["tmp/hello.ml"],
    ## $(location :ppx.exe) resolves to wherever Bazel placed ppx.exe
    ## {print_fmt} is for string interpolation
    cmd = "$(location :ppx.exe) {print_fmt} $< > $@".format(
        print_fmt = PPX_PRINT
    ),
    tools = [":ppx.exe"],
)

###############
ppx_executable(
    name = "ppx.exe",
    main = ":Driver",  # obazl will place main last in the list of deps
    manifest = [
        "@ppx_sexp_value//:ppx_sexp_value",  # contains handler for `[%sexp ]` extension
        # tmp:
        "@ppx_here//runtime-lib",
        "@ppx_sexp_conv//runtime-lib"
    ],
)

###########
ocaml_module(
    name = "Driver",
    struct = ":ppxlib_driver.ml", # this is in the 'outs' of the genrule
    deps = ["@ppxlib//:ppxlib"],
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
