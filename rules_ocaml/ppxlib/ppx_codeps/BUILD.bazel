# $ bazel test ppx/ppx_codeps:test

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_module",
    "ocaml_test",
    "ppx_module",
    "ppx_executable")

###########
ocaml_test(
    name = "test",
    main = ":Test",
    timeout = "short"
)

ocaml_module(
    name   = "Test",
    struct = "test.ml",
    deps = [
        "@ounit2//ounit2",
        ":Hello",     # the transformed and compiled test code
        # "@ppx_sexp_conv//runtime-lib",
        # "@ppx_deriving//runtime",
    ],
    ppx = ":ppx.exe",
    # ppx_print = "@rules_ocaml//ppx/print:text",  # uncomment to get readable output
)

#############
ocaml_module(
    name = "Hello",
    opts = [
        ## the ppx injects code (int_of_sexp, Sexp) that depends on
        ## these modules. usually these would be opened in the source
        ## file, but for demo purposes we open them on the command
        ## line. either way, we must also list the `sexplib` package
        ## that contains them as a dependency, either here in 'deps'
        ## or in the `ppx_codeps` attribute of the ppx transformer.

        "-open", "Sexplib",
        "-open", "Sexplib.Std",
    ],
    # open = [
    # we don't need to do this since this is listed as a ppx_codep of :ppx
    # but we still need to pass -open
    #     "@sexplib//sexplib",
    # ],
    ppx = ":ppx.exe",
    # ppx_print = "@rules_ocaml//ppx/print:text",  # uncomment to get readable output
    struct = "hello.ml",
    deps = [
        # src file contains ref to "Sexp.to_string" so we need to
        # depend on this lib.

        ##FIXME: this should not be needed, ppx_codeps is borken
        "@sexplib//sexplib",

        # "@ppx_sexp_conv//runtime-lib",
        # we do not need to depend on them here, since they are
        # listed as ppx_codeps of the ppx.
    ],
)

###############
ppx_executable(
    name = "ppx.exe",
    main = ":driver", # obazl will place this last in the list of deps
    # main = "@ppxlib//runner:ppxlib_runner.cmx",
    # main_opam = "ppxlib.runner",
    # opts = [],                # obazl will automatically add '-predicates ppx_driver'
    manifest = [
        ## without this, we get "Error: Cannot locate deriver sexp"
        ## or "Error: Ppxlib.Deriving: 'sexp' is not a supported type deriving generator"
        ## when we try to use this ppx executable to transform
        ## hello.ml above, since it contains extension point
        ## "[@@deriving sexp]".

        ## ppx_sexp_conv introduces codeps
        ## "@ppx_sexp_conv//runtime-lib", and "@sexplib0"
        "@ppx_sexp_conv//ppx_sexp_conv",

        ## without these, ppx transformation of test.ml fails
        ## these indirectly introduce a ppx_codep "@ppx_deriving//runtime",
        "@ppx_deriving//ord",
        "@ppx_deriving//show",
    ],
    ## Use of ppx_codeps here is optional. They could also be added
    ## to the compile rules that use this ppx to transform their
    ## sources. Put here, they will be carried along with the ppx
    ## executable and be automatically used wherever it is used - that
    ## is, propagated as deps on the files it transforms. this
    ## obviates the need to manually add these deps to each rule that
    ## depends on this one for ppx transformation.
    ppx_codeps = [
        ## without this, compilation of hello.ml will fail with
        ## "Unbound module" errors (unless the source file lists them
        ## as direct deps).
        # "@ppx_sexp_conv//runtime-lib",
        # "@ppx_deriving//runtime",
        # "@sexplib//sexplib",

        ## HOWEVER: we do not need to list it, because the transitive
        ## closure of the deps includes some ppx_codeps, including
        ## this one, as you can see by running
        ##     bazel query "deps(@ocaml//lib/ppx_sexp_conv)"
    ],

    data = glob(["_opam/lib/stublibs/*"])
)

ppx_module(
    name = "driver",
    struct = ":ppxlib_driver_wrapper.ml",
    deps   = ["@ppxlib//ppxlib"],
    opts = ["-linkall"],
    visibility = ["//visibility:public"]
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver_wrapper.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)
